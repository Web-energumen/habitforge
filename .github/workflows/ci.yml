name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Create .env file from GitHub Secrets
        run: |
          echo "DEBUG=False" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env

      - name: Build Docker containers
        run: docker compose build

      - name: Start Docker containers
        run: docker compose up -d

      - name: Wait for web service to become healthy
        run: |
          echo "Waiting for web service to become healthy..."
          timeout 60 bash -c \
          'until [ "$(docker compose ps -q web | xargs docker inspect -f "{{.State.Health.Status}}")" == "healthy" ]; do 
            sleep 5
            echo "Still waiting..."
          done'

      - name: Apply migrations
        run: docker compose exec -T web python manage.py migrate

      - name: Run tests
        run: docker compose exec -T web python manage.py test

      - name: Lint with flake8
        run: docker compose exec -T web flake8 .

      - name: Check formatting with black
        run: docker compose exec -T web black . --check

      - name: Check import order with isort
        run: docker compose exec -T web isort . --check

      - name: Shut down Docker containers
        if: always()
        run: docker compose down
