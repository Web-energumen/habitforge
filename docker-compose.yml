services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"
 ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  adminer:
    image: adminer
    ports:
      - "127.0.0.1:8080:8080"
    links:
      - "db:db"
    depends_on:
      - db

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      db:
         condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build: .
    command: celery -A habit_tracker worker --loglevel=info
    volumes:
      - .:/code
    depends_on:
      - web
      - redis
    env_file:
      - .env

  beat:
    build: .
    command: celery -A habit_tracker beat --loglevel=info
    volumes:
      - .:/code
    depends_on:
      - web
      - redis
    env_file:
      - .env

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./logs/nginx:/code/logs/nginx
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web

volumes:
  pgdata:
  redis_data:
